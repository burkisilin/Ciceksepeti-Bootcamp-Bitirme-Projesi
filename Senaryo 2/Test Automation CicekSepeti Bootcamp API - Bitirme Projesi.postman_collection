{
	"info": {
		"_postman_id": "5ca7a9bb-a49f-45e8-baca-fec51b52a237",
		"name": "Test Automation Bootcamp API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sign Up Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomStringGenerator(length){\r",
							"    var charset = 'abcdefghkmnpqrstuvwxyz23456789';\r",
							"    return new Array(length)\r",
							"      .fill(null)\r",
							"      .map(()=> charset.charAt(Math.floor(Math.random() * charset.length)))\r",
							"      .join('');\r",
							"\r",
							"}\r",
							"\r",
							"function setRequestBody(emailField,passwordField)\r",
							"{\r",
							"    switch (emailField)\r",
							"    {\r",
							"        case \"validEmail\":\r",
							"            email = randomStringGenerator(3) + \"@\" +randomStringGenerator(5)+ \".com\"\r",
							"            break\r",
							"        case \"invalidEmail\":\r",
							"            email = randomStringGenerator(6) + \".com\"\r",
							"            break\r",
							"        case \"emptyEmail\":\r",
							"            email = \"\"\r",
							"            break\r",
							"    }\r",
							"\r",
							"        switch (passwordField)\r",
							"    {\r",
							"        case \"validPassword\":\r",
							"            \r",
							"            password = randomStringGenerator(8)\r",
							"            break\r",
							"        case \"invalidPassword\":\r",
							"            moreChars = Math.random() < 0.5 // Determine with %50 probability, if password is going to be invalid because of having more than 20 or below 8 characters. If password is going to be 20+ characters.\r",
							"            if (moreChars == true){ // Determines the invalid password lenght to be below 8 or more then 20 chars.\r",
							"                passwordLength = Math.floor(Math.random() * 11) + 21; // Set length from 21 to 31\r",
							"            }\r",
							"            else{\r",
							"                passwordLength = Math.floor(Math.random() * 7) + 1; // Set length from 1 to 7\r",
							"            }\r",
							"            password = randomStringGenerator(passwordLength)\r",
							"            break\r",
							"        case \"emptyPassword\":\r",
							"            password = \"\"\r",
							"            break\r",
							"    }\r",
							"\r",
							"    pm.environment.set(\"email\", email)\r",
							"    pm.environment.set(\"password\", password)\r",
							"}\r",
							"\r",
							"\r",
							"setRequestBody(\"validEmail\",\"validPassword\") // Function can take following arguments : [\"validEmail\", \"invalidEmail\", \"emptyEmail\"], [\"validPassword\", \"invalidPassword\", \"emptyPassword\"] \r",
							"\r",
							"//For this case either one or both of the fields must be invalid/empty. \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const email = pm.environment.get(\"email\")\r",
							"const password = pm.environment.get(\"password\")\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"function validateEmail(email) \r",
							"    {\r",
							"        var re = /\\S+@\\S+\\.\\S+/;\r",
							"        return re.test(email);\r",
							"    }\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Request Body is Valid\", () =>{\r",
							"    \r",
							"    pm.expect(typeof(email) == \"string\").to.be.true;\r",
							"    pm.expect(typeof(password) == \"string\").to.be.true;\r",
							"    pm.expect(validateEmail(email)).equal(true,\"Email is not valid. \");\r",
							"});\r",
							"\r",
							"pm.test('Signed Up Successfully.', () =>{\r",
							"pm.expect(typeof(jsonData.access_token) == \"string\").to.be.true\r",
							"pm.expect(jsonData.access_token.length).to.be.equal(175)\r",
							"});\r",
							"\r",
							"pm.test('Status code', () =>{\r",
							"    pm.expect(pm.response.code).equal(200,'Status received is ' + pm.response.code + '. User successfully signed-up -> Response code must be 200 due to Swagger API Documentation. '); // user successfully signed-up -> Response code must be 200 due to Swagger API Documentation. \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/fe/v1/authorization/signup",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign In Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"email\", \"deneme@db.com\")\r",
							"pm.environment.set(\"password\", \"12345678\")\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"const email = pm.environment.get(\"email\")\r",
							"const password = pm.environment.get(\"password\")\r",
							"\r",
							"pm.test(\"Request Body Types are Valid\", () =>{\r",
							"    pm.expect(typeof(email) == \"string\").to.be.true;\r",
							"    pm.expect(typeof(password) == \"string\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Types are Valid\", () =>{\r",
							"    pm.expect(typeof(jsonData.access_token) == \"string\").to.be.true\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Signed In Successfully.', () =>{\r",
							"    pm.expect(pm.response.text()).to.include(\"access_token\")\r",
							"    pm.expect(jsonData.access_token.length).to.be.equal(175)\r",
							"});\r",
							"\r",
							"pm.test('Status Code', () =>{\r",
							"    pm.expect(pm.response.code).equal(200,'Status received is ' + pm.response.code + '. User successfully signed-up -> Response code must be 200 due to Swagger API Documentation. '); // user successfully signed-up -> Response code must be 200 due to Swagger API Documentation. \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/fe/v1/authorization/signin",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign In Fail - Wrong Credentials",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//False Positive Tests\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"const email = pm.environment.get(\"email\")\r",
							"const password = pm.environment.get(\"password\")\r",
							"\r",
							"pm.test(\"Request Body Types are Valid\", () =>{\r",
							"    pm.expect(typeof(email) == \"string\").to.be.true;\r",
							"    pm.expect(typeof(password) == \"string\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Types are Valid\", () =>{\r",
							"    pm.expect(typeof(jsonData.statusCode) == \"number\").to.be.true\r",
							"    pm.expect(typeof(jsonData.message) == \"string\").to.be.true\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Unsuccessful Sign In', () =>{\r",
							"    pm.expect(pm.response.text()).to.include(\"Unauthorized\")\r",
							"    pm.expect(pm.response.text()).to.not.include(\"access_token\")\r",
							"});\r",
							"\r",
							"pm.test('Status Code', () =>{\r",
							"    pm.expect(pm.response.code).equal(401,'Status received is ' + pm.response.code); // Response code must be 401 due to Swagger API Documentation. \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"wrongMail\",\r\n  \"password\": \"wrongPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/fe/v1/authorization/signin",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up Fail - Invalid Fields",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomStringGenerator(length){\r",
							"    var charset = 'abcdefghkmnpqrstuvwxyz23456789';\r",
							"    return new Array(length)\r",
							"      .fill(null)\r",
							"      .map(()=> charset.charAt(Math.floor(Math.random() * charset.length)))\r",
							"      .join('');\r",
							"\r",
							"}\r",
							"\r",
							"function setRequestBody(emailField,passwordField)\r",
							"{\r",
							"    switch (emailField)\r",
							"    {\r",
							"        case \"validEmail\":\r",
							"            email = randomStringGenerator(3) + \"@\" +randomStringGenerator(5)+ \".com\"\r",
							"            break\r",
							"        case \"invalidEmail\":\r",
							"            email = randomStringGenerator(6) + \".com\"\r",
							"            break\r",
							"        case \"emptyEmail\":\r",
							"            email = \"\"\r",
							"            break\r",
							"    }\r",
							"\r",
							"        switch (passwordField)\r",
							"    {\r",
							"        case \"validPassword\":\r",
							"            \r",
							"            password = randomStringGenerator(8)\r",
							"            break\r",
							"        case \"invalidPassword\":\r",
							"            moreChars = Math.random() < 0.5 // Determine with %50 probability, if password is going to be invalid because of having more than 20 or below 8 characters. If password is going to be 20+ characters.\r",
							"            if (moreChars == true){ // Determines the invalid password lenght to be below 8 or more then 20 chars.\r",
							"                passwordLength = Math.floor(Math.random() * 11) + 21; // Set length from 21 to 31\r",
							"            }\r",
							"            else{\r",
							"                passwordLength = Math.floor(Math.random() * 7) + 1; // Set length from 1 to 7\r",
							"            }\r",
							"            password = randomStringGenerator(passwordLength)\r",
							"            break\r",
							"        case \"emptyPassword\":\r",
							"            password = \"\"\r",
							"            break\r",
							"    }\r",
							"\r",
							"    pm.environment.set(\"email\", email)\r",
							"    pm.environment.set(\"password\", password)\r",
							"}\r",
							"\r",
							"function returnRandomItemFromArray(array)\r",
							"{\r",
							"    return array[Math.floor(Math.random() * array.length)];\r",
							"}\r",
							"\r",
							"function setFieldsInvalidRandomly(){ // Sets one of either fields invalid randomly. So when collection iterated more then one time each condution can be tested.\r",
							"    invalidEmailSituations = [\"invalidEmail\", \"emptyEmail\"]\r",
							"    invalidPasswordSituations = [\"invalidPassword\", \"emptyPassword\"]\r",
							"    invalidFields = [returnRandomItemFromArray(invalidEmailSituations), returnRandomItemFromArray(invalidPasswordSituations)]\r",
							"    pm.environment.set(\"invalidFields\", invalidFields)\r",
							"    setRequestBody(invalidFields[0], invalidFields[1])\r",
							"}\r",
							"\r",
							"\r",
							"//Uncomment line 66 to choose field failure scenarios manually and comment line 68\r",
							"\r",
							"//setRequestBody(\"emptyEmail\",\"invalidPassword\") // Function can take following arguments : [\"validEmail\", \"invalidEmail\", \"emptyEmail\"], [\"validPassword\", \"invalidPassword\", \"emptyPassword\"]\r",
							"\r",
							"setFieldsInvalidRandomly()\r",
							"\r",
							"//For this case either one or both of the fields must be invalid/empty. \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//False Positive Tests\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"const email = pm.environment.get(\"email\")\r",
							"const password = pm.environment.get(\"password\")\r",
							"const invalidFieldsCase = pm.environment.get(\"invalidFields\")\r",
							"\r",
							"function validateEmail(email) \r",
							"{\r",
							"    var re = /\\S+@\\S+\\.\\S+/;\r",
							"    return re.test(email);\r",
							"}\r",
							"\r",
							"function validatePassword(password)\r",
							"{\r",
							"     return password.length >= 8 && password.length <= 20\r",
							"}\r",
							"\r",
							"pm.test(\"Request Body Types are Valid\", () =>{\r",
							"    pm.expect(typeof(email) == \"string\").to.be.true;\r",
							"    pm.expect(typeof(password) == \"string\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Types are Valid\", () =>{\r",
							"    pm.expect(typeof(jsonData.statusCode) == \"number\").to.be.true;\r",
							"    pm.expect(typeof(jsonData.message) == \"object\").to.be.true;\r",
							"    pm.expect(typeof(jsonData.error) == \"string\").to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Request Body Invalid Field Errors Case: \"+ invalidFieldsCase, () =>{\r",
							"    if (validateEmail(email) == false){\r",
							"        pm.expect(pm.response.text()).to.include(\"email must be an email\")\r",
							"    }\r",
							"\r",
							"    if (email.length == 0){\r",
							"        pm.expect(pm.response.text()).to.include(\"mail should not be empty\")\r",
							"    }\r",
							"\r",
							"    if (validatePassword == false){\r",
							"        pm.expect(pm.response.text()).to.include(\"password must be shorter than or equal to 20 characters\")\r",
							"    }\r",
							"\r",
							"    if (password.length == 0){\r",
							"        pm.expect(pm.response.text()).to.include(\"password should not be empty\")\r",
							"    }\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Status Code', () =>{\r",
							"    pm.expect(pm.response.code).equal(400,'Status received is ' + pm.response.code);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/fe/v1/authorization/signup",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up Fail - User Already Signed-Up",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"email\", \"deneme@db.com\")\r",
							"pm.environment.set(\"password\", \"12345678\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//False Positive Tests\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"const email = pm.environment.get(\"email\")\r",
							"const password = pm.environment.get(\"password\")\r",
							"const invalidFieldsCase = pm.environment.get(\"invalidFields\")\r",
							"\r",
							"function validateEmail(email) \r",
							"{\r",
							"    var re = /\\S+@\\S+\\.\\S+/;\r",
							"    return re.test(email);\r",
							"}\r",
							"\r",
							"function validatePassword(password)\r",
							"{\r",
							"     return password.length >= 8 && password.length <= 20\r",
							"}\r",
							"\r",
							"pm.test(\"Request Body Valid\", () =>{\r",
							"    pm.expect(typeof(email) == \"string\").to.be.true;\r",
							"    pm.expect(typeof(password) == \"string\").to.be.true;\r",
							"    pm.expect(validateEmail(email) && validatePassword(password)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body Types are Valid\", () =>{\r",
							"    pm.expect(typeof(jsonData.statusCode) == \"number\").to.be.true;\r",
							"    pm.expect(typeof(jsonData.message) == \"string\").to.be.true;\r",
							"    pm.expect(typeof(jsonData.error) == \"string\").to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Unsuccessful Sign Up', () =>{\r",
							"    pm.expect(pm.response.text()).to.include(\"User already exist!\")\r",
							"    pm.expect(pm.response.text()).to.include(\"Conflict\")\r",
							"    pm.expect(pm.response.text()).to.not.include(\"access_token\")\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Status Code', () =>{\r",
							"    pm.expect(pm.response.code).equal(409,'Status received is ' + pm.response.code); // Response code must be 409 due to Swagger API Documentation. \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/fe/v1/authorization/signup",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		}
	]
}